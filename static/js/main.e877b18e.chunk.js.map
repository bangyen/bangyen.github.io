{"version":3,"sources":["Components/helper.js","Components/Grid.js","Components/Interpreters/Back.js","Components/TextBox.js","Components/Interpreters/Suffolk.js","Components/Interpreters/StunStep.js","Components/Snake.js","Components/Home.js","Components/Error.js","index.js"],"names":["button","sym","func","className","type","onClick","emptyArray","size","arr","Array","fill","map","x","find","ind","len","length","Math","floor","get","move","obj","pos","vel","old","wrap","quo","mod","bind","num","lim","Grid","props","changeColor","changeText","state","start","grid","select","breaks","document","title","addEventListener","this","removeEventListener","mode","run","temp","setState","includes","end","e","value","key","toLowerCase","filter","p","push","cell","table","i","j","bgcolor","chooseColor","row","toString","name","link","style","fontSize","textAlign","href","change","runCode","navigator","clipboard","writeText","join","to","tape","text","val","color","out","reg","acc","getTable","getInfo","getButtons","getTape","getOutput","getRegister","React","Component","Back","code","every","alert","pow","back","c","a","b","outer","handleChange","event","target","prog","ptr","split","col","max","onSubmit","handleSubmit","onChange","onPaste","rows","cols","getProgram","Suffolk","input","inp","prompt","charCodeAt","String","fromCharCode","StunStep","createArr","window","innerHeight","y","innerWidth","_","random","Snake","updateDim","changeDir","buff","s","timerID","setInterval","clearInterval","n","randomPos","height","width","cursor","marginBottom","Home","history","action","display","withRouter","Error","App","basename","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e877b18e.chunk.js","sourcesContent":["export function button(sym, func) {\r\n    return <button className='custom'\r\n                type='button'\r\n                onClick={func}>\r\n            {sym}\r\n        </button>;\r\n}\r\n\r\nexport function emptyArray(size) {\r\n    let arr = Array(size).fill(' ');\r\n    return arr.map(x => [...arr]);\r\n}\r\n\r\nexport function find(arr, ind) {\r\n    let len = arr.length;\r\n    let quo = Math.floor(ind / len);\r\n\r\n    return arr[quo];\r\n}\r\n\r\nexport function get(arr, ind) {\r\n    let row = find(arr, ind);\r\n    return row[ind % arr.length];\r\n}\r\n\r\nexport function move(obj) {\r\n    let {\r\n        pos, vel, old,\r\n        size = old,\r\n        wrap = true\r\n    } = obj;\r\n\r\n    let [quo, mod] = vel;\r\n    quo += Math.floor(pos / old);\r\n    mod += pos % old;\r\n\r\n    if (wrap) {\r\n        quo = (quo + size) % size;\r\n        mod = (mod + size) % size;\r\n    } else {\r\n        quo = bind(quo, size);\r\n        mod = bind(mod, size);\r\n    }\r\n\r\n    return quo * size + mod;\r\n}\r\n\r\nfunction bind(num, lim) {\r\n    if (num >= lim)\r\n        num = lim - 1;\r\n    else if (num < 0)\r\n        num = 0;\r\n\r\n    return num;\r\n}","import {button, emptyArray, find, move} from './helper';\r\nimport {Link} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.changeColor = this.changeColor.bind(this);\r\n        this.changeText  = this.changeText.bind(this);\r\n        let size = 5;\r\n\r\n        this.state = {\r\n            ...this.props.start,\r\n            grid: emptyArray(size),\r\n            select: null,\r\n            pos:    null,\r\n            breaks: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Interpreter';\r\n        document.addEventListener(\r\n            'keydown',\r\n            this.changeText,\r\n            false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            this.changeText,\r\n            false);\r\n    }\r\n\r\n    runCode(mode) {\r\n        return function() {\r\n            if (this.state.pos === null) {\r\n                this.func = this.props.run(\r\n                    this.state.grid);\r\n\r\n                if (mode !== 'run') {\r\n                    this.setState({\r\n                        ...this.props.start,\r\n                        select: null,\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.setState({select: null});\r\n            let temp;\r\n\r\n            if (mode === 'run')\r\n                do {\r\n                    temp = this.func();\r\n                } while (!(this.state\r\n                               .breaks\r\n                               .includes(temp.pos)\r\n                    || temp.end));\r\n            else if (mode === 'next')\r\n                temp = this.func();\r\n            else if (mode === 'prev')\r\n                temp = this.func(true);\r\n\r\n            this.setState(temp);\r\n        }.bind(this);\r\n    }\r\n\r\n    changeText(e) {\r\n        let {select, breaks} = this.state;\r\n\r\n        if (select !== null) {\r\n            let arr  = this.state.grid;\r\n            let size = arr.length;\r\n            let value;\r\n\r\n            if (e.key.toLowerCase() === 'b') {\r\n                if (breaks.includes(select))\r\n                    breaks = breaks.filter(p =>\r\n                        p !== select);\r\n                else\r\n                    breaks.push(select);\r\n\r\n                this.setState({breaks: breaks});\r\n                return;\r\n            } else if (e.key.length === 1) {\r\n                value = e.key;\r\n            } else if (e.key === 'Backspace'\r\n                    || e.key === 'Delete') {\r\n                value = ' ';\r\n            } else if (e.key.includes('Arrow')) {\r\n                let vel;\r\n\r\n                if (e.key.includes('Left'))\r\n                    vel = [0, -1];\r\n                else if (e.key.includes('Right'))\r\n                    vel = [0, 1];\r\n                else if (e.key.includes('Up'))\r\n                    vel = [-1, 0];\r\n                else if (e.key.includes('Down'))\r\n                    vel = [1, 0];\r\n\r\n                select = move({\r\n                    pos: select,\r\n                    vel: vel,\r\n                    old: size\r\n                });\r\n\r\n                this.setState({select: select});\r\n                return;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            find(arr, select)[select % size] = value;\r\n            this.setState({grid: arr});\r\n        }\r\n    }\r\n\r\n    changeColor(pos) {\r\n        return function() {\r\n            let select = this.state.select;\r\n            select = select === pos\r\n                ? null : pos;\r\n            this.setState({select: select});\r\n        }.bind(this);\r\n    }\r\n\r\n    chooseColor(cell) {\r\n        let {select, pos, breaks}\r\n            = this.state;\r\n\r\n        if (cell === select)\r\n            return 'grey';\r\n        else if (cell === pos)\r\n            return 'red';\r\n        else if (breaks.includes(cell))\r\n            return 'yellow';\r\n\r\n        return 'white';\r\n    }\r\n\r\n    getTable() {\r\n        let grid = this.state.grid;\r\n        let table = emptyArray(grid.length);\r\n        let pos;\r\n\r\n        for (let i in table) {\r\n            for (let j in table) {\r\n                pos = grid.length * +i + +j;\r\n                table[i][j] = <td key={`${i}-${j}`}\r\n                            onClick={this.changeColor(pos)}\r\n                            bgcolor={this.chooseColor(pos)}>\r\n                        <div>\r\n                            &nbsp;{grid[i][j]}&nbsp;\r\n                        </div>\r\n                    </td>;\r\n            }\r\n        }\r\n\r\n        table = table.map((arr, row) =>\r\n                <tr key={row.toString()}>\r\n                    {arr}\r\n                </tr>\r\n            );\r\n\r\n        return <div className='split left'>\r\n                <div className='centered'>\r\n                    <table>\r\n                        <tbody>\r\n                            {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>;\r\n    }\r\n\r\n    getInfo() {\r\n        let {name, link} = this.props;\r\n        link = 'https://esolangs.org/wiki/'\r\n            + (link ? link : name);\r\n\r\n        return <ul style={{\r\n                    fontSize: '75%',\r\n                    textAlign: 'left'}}>\r\n                <li>Click to select/unselect</li>\r\n                <li>Type to change selected cell</li>\r\n                <li>Press (b) to use breakpoints</li>\r\n                <li>\r\n                    {name} commands located&nbsp;\r\n                    <a href={link}>here</a>\r\n                </li>\r\n            </ul>;\r\n    }\r\n\r\n    getButtons() {\r\n        let {grid, select} = this.state;\r\n        let obj = this.props.start;\r\n\r\n        let change = function (num) {\r\n            return function() {\r\n                if (!num)\r\n                    return;\r\n\r\n                let arr = emptyArray(num);\r\n                select = move({\r\n                    pos: select,\r\n                    vel: [0, 0],\r\n                    old: grid.length,\r\n                    size: num,\r\n                    wrap: false\r\n                });\r\n\r\n                for (let i in arr)\r\n                    for (let j in arr)\r\n                        if (grid[i])\r\n                            arr[i][j] = grid[i][j];\r\n                        else\r\n                            arr[i][j] = ' ';\r\n\r\n                this.setState({\r\n                    select: select,\r\n                    grid: arr\r\n                });\r\n            }.bind(this);\r\n        }.bind(this);\r\n\r\n        return (<div>\r\n                {button('▶', this.runCode('run'))}\r\n                {button('\\xa0❮\\xa0', this.runCode('prev'))}\r\n                {button('\\xa0❯\\xa0', this.runCode('next'))}\r\n                {button('✖', () => this.setState({\r\n                    ...obj, pos: null\r\n                }))}\r\n                <br />\r\n                {button('➕\\ufe0e', change(grid.length + 1))}\r\n                {button('➖\\ufe0e', change(grid.length - 1))}\r\n                {button('📥\\ufe0e', () => {\r\n                    navigator.clipboard.writeText(\r\n                        grid.map(x => x.join('')).join('\\n')\r\n                )})}\r\n                <Link to='/'>\r\n                    <button className='custom'\r\n                            type='button'>\r\n                        🏠&#xfe0e;\r\n                    </button>\r\n                </Link>\r\n            </div>);\r\n    }\r\n\r\n    getTape() {\r\n        if (!this.props.tape)\r\n            return (null);\r\n\r\n        let tape = this.state.tape;\r\n        let text = tape.map((val, ind) => {\r\n            let color = this.state.cell === ind\r\n                ? 'red' : 'white';\r\n            return <code key={ind.toString()}\r\n                         style={{color: color}}>\r\n                    &nbsp;{val}\r\n                </code>;});\r\n\r\n        return <div className='output'>\r\n                <code>\r\n                    Tape:{text}\r\n                </code>\r\n            </div>;\r\n    }\r\n\r\n    getOutput() {\r\n        if (this.props.out)\r\n            return <div className='output'>\r\n                    <code>\r\n                        Output:\r\n                        {this.state.out === ''\r\n                            ? '' : ' '}\r\n                        {this.state.out}\r\n                    </code>\r\n                </div>;\r\n\r\n        return (null);\r\n    }\r\n\r\n    getRegister() {\r\n        if (this.props.reg)\r\n            return <div className='output'>\r\n                    <code>\r\n                        Register: {this.state.acc}\r\n                    </code>\r\n                </div>;\r\n\r\n        return (null);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className='App-header'>\r\n                {this.getTable()}\r\n                <div className='split right'>\r\n                    <div className='centered'>\r\n                        <code>Instructions:</code>\r\n                        {this.getInfo()}\r\n                        {this.getButtons()}\r\n                        <br />\r\n                        {this.getTape()}\r\n                        {this.getOutput()}\r\n                        {this.getRegister()}\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}","import {get, move} from '../helper';\r\nimport Grid from '../Grid';\r\n\r\nfunction outer(obj) {\r\n    function run(code) {\r\n        if (code.every(\r\n                e => !e.includes('*'))) {\r\n            alert('No halt instruction detected!');\r\n        }\r\n\r\n        let size = code.length;\r\n        let area = Math.pow(size, 2);\r\n        let vel = [0, 1];\r\n        let arr = [obj];\r\n        let ind = 0;\r\n\r\n        function wrap(pos) {\r\n            return move({\r\n                pos: pos,\r\n                vel: vel,\r\n                old: size\r\n            });\r\n        }\r\n\r\n        return function(back = false) {\r\n            let state = arr[arr.length - 1];\r\n\r\n            if (back) {\r\n                if (ind)\r\n                    ind -= 1;\r\n            } else {\r\n                if (state.end)\r\n                    arr = [obj];\r\n                else\r\n                    ind += 1;\r\n            }\r\n\r\n            if (ind < arr.length)\r\n                return arr[ind];\r\n\r\n            let {tape, cell, end, pos} = state;\r\n            let c = get(code, pos);\r\n            let [a, b] = vel;\r\n            tape = [...tape];\r\n\r\n            if (c === '\\\\') {\r\n                vel = [b, a];\r\n            } else if (c === '/') {\r\n                vel = [-b, -a];\r\n            } else if (c === '<' && cell) {\r\n                cell -= 1;\r\n            } else if (c === '>') {\r\n                cell += 1;\r\n                if (cell === tape.length)\r\n                    tape.push(0);\r\n            } else if (c === '-') {\r\n                tape[cell] ^= 1;\r\n            } else if (c === '+' && !tape[cell]) {\r\n                do {\r\n                    pos = wrap(pos);\r\n                    c = get(code, pos);\r\n                } while (!'\\\\/<>-+*'.includes(c));\r\n            } else if (c === '*') {\r\n                end = true;\r\n                pos = null;\r\n            }\r\n\r\n            if (pos !== null)\r\n                pos = wrap(pos);\r\n\r\n            state = {\r\n                pos: pos,\r\n                tape: tape,\r\n                cell: cell,\r\n                end: end\r\n            };\r\n\r\n            arr.push(state);\r\n            return state;\r\n        };\r\n    }\r\n\r\n    return run;\r\n}\r\n\r\nexport default function Back() {\r\n    let obj = {\r\n        end: false,\r\n        pos: 0,\r\n        tape: [0],\r\n        cell: 0\r\n    };\r\n\r\n    let run = outer(obj);\r\n    return <Grid\r\n        name='Back'\r\n        start={obj}\r\n        run={run}\r\n        tape={true} />;\r\n}","import {Link} from 'react-router-dom';\r\nimport {button} from './helper';\r\nimport React from 'react';\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            ...this.props.start,\r\n            value: '',\r\n            code: '',\r\n            end: true\r\n        };\r\n\r\n        this.func = () => this.state;\r\n        this.handleChange\r\n            = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Interpreter';\r\n    }\r\n\r\n    runCode(mode) {\r\n        return function() {\r\n            let state;\r\n\r\n            if (mode === 'run')\r\n                do {\r\n                    state = this.func();\r\n                } while (!state.end);\r\n            else if (mode === 'prev')\r\n                state = this.func(true);\r\n            else\r\n                state = this.func();\r\n\r\n            this.setState(state);\r\n        }.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        let val = event.target.value;\r\n\r\n        if (val !== this.state.value) {\r\n            let {run, code}\r\n                = this.props.run(val);\r\n\r\n            this.func = run;\r\n            this.setState({\r\n                ...this.props.start,\r\n                value: val,\r\n                code: code\r\n            });\r\n        }\r\n    }\r\n\r\n    getProgram() {\r\n        let code = this.state.code;\r\n        let prog = [...code].map((val, ind) => {\r\n            let color = this.state.ind === ind\r\n                ? 'red' : 'white';\r\n            return <code key={ind.toString()}\r\n                         style={{color: color}}>\r\n                    {val}\r\n                </code>;});\r\n        let text = 'Program:';\r\n\r\n        if (prog.length)\r\n            text += ' ';\r\n\r\n        return <div className='output'>\r\n                <code>\r\n                    {text}{prog}\r\n                </code>\r\n            </div>;\r\n    }\r\n\r\n    getTape() {\r\n        if (!this.props.tape)\r\n            return (null);\r\n\r\n        let tape = this.state.tape;\r\n        let text = tape.map((val, ind) => {\r\n            let color = this.state.ptr === ind\r\n                ? 'red' : 'white';\r\n            return <code key={ind.toString()}\r\n                         style={{color: color}}>\r\n                    &nbsp;{val}\r\n                </code>;});\r\n\r\n        return <div className='output'>\r\n                <code>\r\n                    Tape:{text}\r\n                </code>\r\n            </div>;\r\n    }\r\n\r\n    getOutput() {\r\n        if (this.props.out)\r\n            return <div className='output'>\r\n                    <code>\r\n                        Output:\r\n                        {this.state.out === ''\r\n                            ? '' : ' '}\r\n                        {this.state.out}\r\n                    </code>\r\n                </div>;\r\n\r\n        return (null);\r\n    }\r\n\r\n    getRegister() {\r\n        if (this.props.reg)\r\n            return <div className='output'>\r\n                    <code>\r\n                        Register: {this.state.acc}\r\n                    </code>\r\n                </div>;\r\n\r\n        return (null);\r\n    }\r\n\r\n    render() {\r\n        let {name, link} = this.props;\r\n        let arr = this.state.value.split('\\n');\r\n        let col = Math.max(...arr.map(val => val.length));\r\n        let row = arr.length;\r\n\r\n        if (row < 3)\r\n            row = 12;\r\n        if (col < 30)\r\n            col = 60;\r\n\r\n        return (\r\n            <header className='App-header'>\r\n                <div className='split left'>\r\n                    <div className='centered'>\r\n                        <code>\r\n                            {name + ' '}\r\n                            (<a href={'https://esolangs.org/wiki/'\r\n                                    + (link ? link : name)}>\r\n                                Commands\r\n                            </a>)\r\n                        </code>\r\n                        <br /><br />\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <label>\r\n                                <textarea\r\n                                    value={this.state.value}\r\n                                    onChange={this.handleChange}\r\n                                    onPaste={this.handleChange}\r\n                                    rows={row} cols={col} />\r\n                            </label>\r\n                        </form>\r\n                        {button('▶', this.runCode('run'))}\r\n                        {button('\\xa0❮\\xa0', this.runCode('prev'))}\r\n                        {button('\\xa0❯\\xa0', this.runCode('next'))}\r\n                        <Link to='/'>\r\n                            <button className='custom'\r\n                                    type='button'>\r\n                                🏠&#xfe0e;\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n                <div className='split right'>\r\n                    <div className='centered'>\r\n                        {this.getProgram()}\r\n                        {this.getTape()}\r\n                        {this.getOutput()}\r\n                        {this.getRegister()}\r\n                    </div>\r\n                </div>\r\n\r\n            </header>\r\n        );\r\n    }\r\n}","import TextBox from '../TextBox';\r\n\r\nfunction outer(obj) {\r\n    function run(input) {\r\n        let code = '';\r\n\r\n        for (let c of input)\r\n            if ('><!,.'.includes(c))\r\n                code += c;\r\n\r\n        let len = code.length;\r\n        let arr = [obj];\r\n        let num = 0;\r\n\r\n        function inner(back = false) {\r\n            let state = arr[arr.length - 1];\r\n            let c = code[num % len];\r\n            let {end} = state;\r\n\r\n            if (back) {\r\n                if (num)\r\n                    num -= 1;\r\n            } else {\r\n                num += 1;\r\n\r\n                if (num % len === 0)\r\n                    end = true;\r\n                else if (state.end)\r\n                    end = false;\r\n            }\r\n\r\n            if (num < arr.length)\r\n                return arr[num];\r\n\r\n            let {tape, acc, ptr, out} = state;\r\n            let ind = num % len;\r\n            tape = [...tape];\r\n\r\n            if (c === '>') {\r\n                ptr += 1;\r\n                if (ptr === tape.length)\r\n                    tape.push(0);\r\n            } else if (c === '<') {\r\n                acc += tape[ptr];\r\n                ptr = 0;\r\n            } else if (c === '!') {\r\n                tape[ptr] -= acc - 1;\r\n\r\n                if (tape[ptr] < 0)\r\n                    tape[ptr] = 0;\r\n\r\n                acc = 0;\r\n                ptr = 0;\r\n            } else if (c === ',') {\r\n                let inp = '';\r\n\r\n                while (!inp.length)\r\n                    inp = prompt('Input: ');\r\n\r\n                acc = inp.charCodeAt(0);\r\n            } else {\r\n                if (acc > 0)\r\n                    out += String\r\n                        .fromCharCode(acc - 1);\r\n            }\r\n\r\n            state = {\r\n                tape: tape,\r\n                acc: acc,\r\n                ind: ind,\r\n                ptr: ptr,\r\n                out: out,\r\n                end: end\r\n            };\r\n\r\n            arr.push(state);\r\n            return state;\r\n        };\r\n\r\n        return {\r\n            run: inner,\r\n            code: code\r\n        };\r\n    }\r\n\r\n    return run;\r\n}\r\n\r\nexport default function Suffolk() {\r\n    let obj = {\r\n        tape: [0],\r\n        acc: 0,\r\n        ind: 0,\r\n        ptr: 0,\r\n        out: '',\r\n        end: false\r\n    };\r\n\r\n    let run = outer(obj);\r\n    return <TextBox\r\n        name='Suffolk'\r\n        start={obj}\r\n        run={run}\r\n        tape={true}\r\n        out={true}\r\n        reg={true} />;\r\n}","import TextBox from '../TextBox';\r\n\r\nfunction outer(obj) {\r\n    function run(input) {\r\n        let code = '';\r\n\r\n        for (let c of input)\r\n            if ('+-><'.includes(c))\r\n                code += c;\r\n\r\n        let len = code.length;\r\n        let arr = [obj];\r\n        let num = 0;\r\n\r\n        function inner(back = false) {\r\n            let state = arr[arr.length - 1];\r\n            let {tape, ptr, end} = state;\r\n            let c = code[num % len];\r\n\r\n            if (back) {\r\n                if (num)\r\n                    num -= 1;\r\n            } else {\r\n                num += 1;\r\n\r\n                if (num % len === 0) {\r\n                    end = true;\r\n                } else if (state.end) {\r\n                    if (tape[ptr]) {\r\n                        end = false;\r\n                    } else {\r\n                        arr = [obj];\r\n                        num = 0;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (num < arr.length)\r\n                return arr[num];\r\n\r\n            let ind = num % len;\r\n            tape = [...tape];\r\n\r\n            if (c === '+') {\r\n                tape[ptr] += 1;\r\n            } else if (tape[ptr]) {\r\n                if (c === '-') {\r\n                    tape[ptr] -= 1;\r\n                } else if (c === '>') {\r\n                    ptr += 1;\r\n\r\n                    if (ptr === tape.length)\r\n                        tape.push(1);\r\n                } else if (ptr) {\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n\r\n            state = {\r\n                tape: tape,\r\n                ind: ind,\r\n                ptr: ptr,\r\n                end: end\r\n            };\r\n\r\n            arr.push(state);\r\n            return state;\r\n        };\r\n\r\n        return {\r\n            run: inner,\r\n            code: code\r\n        };\r\n    }\r\n\r\n    return run;\r\n}\r\n\r\nexport default function StunStep() {\r\n    let obj = {\r\n        tape: [1],\r\n        ind: 0,\r\n        ptr: 0,\r\n        end: false\r\n    };\r\n\r\n    let run = outer(obj);\r\n    return <TextBox\r\n        name='Stun Step'\r\n        link='Stun_Step'\r\n        start={obj}\r\n        run={run}\r\n        tape={true} />;\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction createArr() {\r\n    let x = window.innerHeight;\r\n    let y = window.innerWidth;\r\n\r\n    x = Math.floor(x / 50);\r\n    y = Math.floor(y / 50);\r\n    let arr = [...Array(x)]\r\n        .map(_ => Array(y).fill(0));\r\n\r\n    let a = Math.floor(Math.random() * x);\r\n    let b = Math.floor(Math.random() * y);\r\n    arr[a][b] = -1;\r\n\r\n    return arr;\r\n}\r\n\r\nexport default class Snake extends React.Component {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.updateDim =\r\n            this.updateDim\r\n                .bind(this);\r\n        this.changeDir =\r\n            this.changeDir\r\n                .bind(this);\r\n\r\n        let arr = createArr();\r\n        this.state = {\r\n            row: arr.length,\r\n            col: arr[0].length,\r\n            len: 3,\r\n            pos: [0, 0],\r\n            vel: [0, 1],\r\n            arr: arr,\r\n            move: true,\r\n            buff: null\r\n        }\r\n    }\r\n\r\n    randomPos() {\r\n        let arr = [...this.state.arr];\r\n        let row = this.state.row;\r\n        let col = this.state.col;\r\n        let x, y;\r\n\r\n        do {\r\n            x = Math.floor(Math.random() * row);\r\n            y = Math.floor(Math.random() * col);\r\n        } while (arr[x][y]);\r\n\r\n        arr[x][y] = -1;\r\n        this.setState({arr: arr});\r\n    }\r\n\r\n    updateDim() {\r\n        let arr = createArr();\r\n\r\n        this.setState({\r\n            row: arr.length,\r\n            col: arr[0].length,\r\n            arr: arr});\r\n    }\r\n\r\n    changeDir(e) {\r\n        let s = e.key.toLowerCase();\r\n        let old = this.state.vel;\r\n        let vel;\r\n\r\n        if (s === 'arrowleft' || s === 'a')\r\n            vel = [0, -1];\r\n        else if (s === 'arrowright' || s === 'd')\r\n            vel = [0, 1];\r\n        else if (s === 'arrowup' || s === 'w')\r\n            vel = [-1, 0];\r\n        else if (s === 'arrowdown' || s === 's')\r\n            vel = [1, 0];\r\n        else\r\n            return;\r\n\r\n        if (old[0] + vel[0] &&\r\n                old[0] !== vel[0])\r\n            if (this.state.move)\r\n                this.setState({\r\n                    vel: vel,\r\n                    move: false});\r\n            else\r\n                this.setState({\r\n                    buff: vel});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.move(), 100);\r\n        document.title = 'Snake';\r\n        document.addEventListener(\r\n            'keydown',\r\n            this.changeDir,\r\n            false);\r\n        this.updateDim();\r\n        window.addEventListener(\r\n            'resize', this.updateDim);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n        document.removeEventListener(\r\n            'keydown',\r\n            this.changeDir,\r\n            false);\r\n        window.removeEventListener(\r\n            'resize', this.updateDim);\r\n    }\r\n\r\n    move() {\r\n        let [x, y] = this.state.pos;\r\n        let [a, b] = this.state.vel;\r\n        let {row, col} = this.state;\r\n        let arr = this.state.arr\r\n            .map(a => a.map(\r\n                n => n > 0 ? n - 1 : n\r\n            ));\r\n\r\n        x = (x + a + row) % row;\r\n        y = (y + b + col) % col;\r\n\r\n        if (arr[x][y] > 0) {\r\n            let num = arr[x][y];\r\n            this.setState({len: this.state.len - num});\r\n            arr = arr.map(a => a.map(\r\n                n => n > num ? n - num : -(n < 0)));\r\n        } else if (arr[x][y] < 0) {\r\n            this.setState({len: this.state.len + 1});\r\n            this.randomPos();\r\n            arr = this.state.arr.map(a => a.map(\r\n                n => n > 0 ? n + 1 : -(n < 0)));\r\n        }\r\n\r\n        arr[x][y] = this.state.len;\r\n        let buff = this.state.buff;\r\n        if (buff)\r\n            this.setState({\r\n                buff: null,\r\n                vel: buff});\r\n\r\n        this.setState({\r\n            move: !buff,\r\n            pos: [x, y],\r\n            arr: arr\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className='App-header'>\r\n                <table style={{height: '85vh', width: '95vw'}}>\r\n                    <tbody>\r\n                        {this.state.arr.map((a, row) =>\r\n                            (<tr key={row.toString()}>{\r\n                                a.map((val, col) =>\r\n                                <td key={`${row}-${col}`}\r\n                                    bgcolor={val > 0 ? 'white' :\r\n                                        val < 0 ? 'red' : 'black'}\r\n                                        style={{cursor: 'default'}}>\r\n                                    <div>&nbsp;</div>\r\n                                </td>)\r\n                            }</tr>)\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n                <Link to='/' style={{marginBottom: '20px'}}>\r\n                    <button className='custom'\r\n                            type='button'>\r\n                        🏠&#xfe0e;\r\n                    </button>\r\n                </Link>\r\n            </header>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {withRouter, Link} from 'react-router-dom';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            select: false,\r\n            value: 'back'\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = 'Home';\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        this.props\r\n            .history\r\n            .push(`/${this.state.value}`);\r\n    }\r\n\r\n    render() {\r\n        let select;\r\n\r\n        if (this.state.select)\r\n            select = (\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        <select\r\n                                value={this.state.value}\r\n                                onChange={this.handleChange}>\r\n                            <option value=\"back\">Back</option>\r\n                            <option value=\"stun_step\">Stun Step</option>\r\n                            <option value=\"suffolk\">Suffolk</option>\r\n                        </select>\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>);\r\n        else\r\n            select = (null);\r\n\r\n        return (\r\n            <header className='App-header'>\r\n                <h1 className='logo'>\r\n                    Bangyen\r\n                </h1>\r\n                <div>\r\n                    <button className='custom'\r\n                            type='button'\r\n                            onClick={() => this.setState({\r\n                                select: true})}>\r\n                        Interpreter\r\n                    </button>\r\n                    <Link to='/snake'>\r\n                        <button className='custom'\r\n                                type='button'>\r\n                            Snake\r\n                        </button>\r\n                    </Link>\r\n                    <form action='https://github.com/bangyen'\r\n                            style={{display: 'inline-block'}}>\r\n                        <input type='submit'\r\n                            value='GitHub'\r\n                            className='custom' />\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    {select}\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Error() {\r\n    document.title = '404';\r\n    return (\r\n        <header className='App-header'>\r\n            <h1>404 Error</h1>\r\n            <Link to='/' style={{ marginBottom: '20px' }}>\r\n                <button className='custom'\r\n                            type='button'>\r\n                        🏠&#xfe0e;\r\n                    </button>\r\n            </Link>\r\n        </header>\r\n    );\r\n}","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\nimport Back from './Components/Interpreters/Back';\r\nimport Suffolk from './Components/Interpreters/Suffolk';\r\nimport StunStep from './Components/Interpreters/StunStep';\r\nimport Snake from './Components/Snake';\r\nimport Home from './Components/Home';\r\nimport Error from './Components/Error';\r\n\r\nimport './index.css';\r\nimport './Grid.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router basename='/'>\r\n            <div>\r\n                <Switch>\r\n                    <Route exact path=\"/back\">\r\n                        <Back />\r\n                    </Route>\r\n                    <Route exact path=\"/stun_step\">\r\n                        <StunStep />\r\n                    </Route>\r\n                    <Route exact path=\"/suffolk\">\r\n                        <Suffolk />\r\n                    </Route>\r\n                    <Route exact path=\"/snake\">\r\n                        <Snake />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Home />\r\n                    </Route>\r\n                    <Route >\r\n                        <Error />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}