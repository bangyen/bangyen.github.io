{"version":3,"file":"static/js/820.fc3baebe.chunk.js","mappings":"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","sources":["Interpreters/Display.tsx","Interpreters/Toolbar.tsx","Interpreters/Editor.tsx","Interpreters/Text/TextEditor.tsx","Interpreters/Text/StunStep.tsx","Interpreters/Text/Suffolk.tsx","Interpreters/Grid/eventHandlers.ts","Interpreters/Grid/GridEditor.tsx","Interpreters/Grid/WII2D.tsx","Interpreters/Grid/Back.tsx","Interpreters/index.ts","hooks.ts"],"sourcesContent":["import React, { useContext, memo } from 'react';\nimport { Box, Typography, Chip, IconButton } from '../components/mui';\nimport { EditorContext, Text } from './Editor';\nimport { COLORS, TYPOGRAPHY } from '../config/theme';\nimport { GlassCard } from '../helpers';\n\nimport {\n    CodeRounded,\n    DataArrayRounded,\n    TextFieldsRounded,\n    PlusOneRounded,\n    ViewModuleRounded,\n    ViewListRounded,\n} from '../components/icons';\n\n// Type assertion for GlassCard component\nconst TypedGlassCard = GlassCard as React.ComponentType<{\n    children?: React.ReactNode;\n    sx?: Record<string, unknown>;\n}>;\n\ninterface DisplayProps {\n    Icon: React.ElementType;\n    title: string;\n    data: (string | number)[];\n    pointer?: number;\n    children?: React.ReactNode;\n}\n\ninterface CompactDisplayProps {\n    Icon: React.ElementType;\n    title: string;\n    data: (string | number)[];\n    pointer?: number;\n}\n\ninterface DisplayModeToggleProps {\n    compactMode: boolean;\n    setCompactMode: (value: boolean) => void;\n}\n\ninterface ProgramProps {\n    compact?: boolean;\n}\n\ninterface TapeProps {\n    compact?: boolean;\n}\n\ninterface OutputProps {\n    compact?: boolean;\n}\n\ninterface RegisterProps {\n    compact?: boolean;\n}\n\nexport const Program = memo(function Program({\n    compact = false,\n}: ProgramProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) return null;\n\n    const { code, index } = editorContext;\n\n    if (code === undefined) return null;\n\n    if (compact) {\n        return (\n            <CompactDisplay\n                Icon={CodeRounded}\n                title=\"Program\"\n                data={[...code]}\n                pointer={index}\n            />\n        );\n    }\n\n    return (\n        <Display\n            Icon={CodeRounded}\n            title=\"Program\"\n            data={[...code]}\n            pointer={index}\n        >\n            <Text text={'\\xA0'} />\n        </Display>\n    );\n});\n\nexport const Tape = memo(function Tape({ compact = false }: TapeProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) return null;\n\n    const { tape, pointer, tapeFlag } = editorContext;\n\n    if (!tapeFlag) return null;\n\n    if (compact) {\n        return (\n            <CompactDisplay\n                Icon={DataArrayRounded}\n                title=\"Tape\"\n                data={tape}\n                pointer={pointer}\n            />\n        );\n    }\n\n    return (\n        <Display\n            Icon={DataArrayRounded}\n            title=\"Tape\"\n            data={tape}\n            pointer={pointer}\n        >\n            <Text text={'\\xA0'} />\n        </Display>\n    );\n});\n\nexport const Output = memo(function Output({ compact = false }: OutputProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) return null;\n\n    const { output, outFlag } = editorContext;\n\n    if (!outFlag) return null;\n\n    // Normalize output to array of strings or numbers\n    const outputArray = Array.isArray(output) ? output : [output];\n\n    if (compact) {\n        return (\n            <CompactDisplay\n                Icon={TextFieldsRounded}\n                title=\"Output\"\n                data={outputArray}\n            />\n        );\n    }\n\n    return (\n        <Display Icon={TextFieldsRounded} title=\"Output\" data={outputArray}>\n            <Text text={'\\xA0'} />\n        </Display>\n    );\n});\n\nexport const Register = memo(function Register({\n    compact = false,\n}: RegisterProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) return null;\n\n    const { register, regFlag } = editorContext;\n\n    if (!regFlag) return null;\n\n    if (compact) {\n        return (\n            <CompactDisplay\n                Icon={PlusOneRounded}\n                title=\"Register\"\n                data={[register]}\n            />\n        );\n    }\n\n    return (\n        <Display Icon={PlusOneRounded} title=\"Register\" data={[register]}>\n            <Text text={'\\xA0'} />\n        </Display>\n    );\n});\n\nfunction Display({ Icon, title, data, pointer, children }: DisplayProps) {\n    const values = data.map((val, ind) => {\n        const color = pointer === ind ? 'info' : 'inherit';\n\n        return (\n            <Text\n                key={title + ind}\n                color={color}\n                text={val}\n                sx={{\n                    fontSize: TYPOGRAPHY.fontSize.body,\n                    fontWeight: TYPOGRAPHY.fontWeight.semibold,\n                    fontFamily: 'monospace',\n                }}\n            />\n        );\n    });\n\n    return (\n        <Box sx={{ height: '100%' }}>\n            <Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 1,\n                    marginBottom: 1,\n                }}\n            >\n                <Icon sx={{ color: COLORS.primary.main }} />\n                <Typography\n                    variant=\"subtitle2\"\n                    sx={{\n                        color: COLORS.primary.main,\n                        fontWeight: TYPOGRAPHY.fontWeight.semibold,\n                        fontSize: TYPOGRAPHY.fontSize.body,\n                    }}\n                >\n                    {title}\n                </Typography>\n            </Box>\n            <Scrollable>\n                {values}\n                {children}\n            </Scrollable>\n        </Box>\n    );\n}\n\nfunction CompactDisplay({ Icon, title, data, pointer }: CompactDisplayProps) {\n    const values = data.map((val, ind) => {\n        const color = pointer === ind ? 'info' : 'inherit';\n        return (\n            <Chip\n                key={title + ind}\n                label={String(val)}\n                size=\"small\"\n                sx={{\n                    backgroundColor:\n                        color === 'info'\n                            ? COLORS.primary.main\n                            : COLORS.surface.glass,\n                    color:\n                        color === 'info'\n                            ? COLORS.text.primary\n                            : COLORS.text.primary,\n                    fontFamily: 'monospace',\n                    fontSize: TYPOGRAPHY.fontSize.caption,\n                    height: '32px',\n                    border: `1px solid ${COLORS.border.subtle}`,\n                    backdropFilter: 'blur(24px) saturate(180%)',\n                }}\n            />\n        );\n    });\n\n    return (\n        <TypedGlassCard\n            sx={{\n                height: '100%',\n                minHeight: '24rem',\n            }}\n        >\n            <Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 1,\n                    marginBottom: 1,\n                }}\n            >\n                <Icon\n                    sx={{\n                        color: COLORS.primary.main,\n                        fontSize: TYPOGRAPHY.fontSize.body,\n                    }}\n                />\n                <Typography\n                    variant=\"caption\"\n                    sx={{\n                        color: COLORS.primary.main,\n                        fontWeight: TYPOGRAPHY.fontWeight.semibold,\n                        fontSize: TYPOGRAPHY.fontSize.caption,\n                    }}\n                >\n                    {title}\n                </Typography>\n            </Box>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {values}\n            </Box>\n        </TypedGlassCard>\n    );\n}\n\nexport function DisplayModeToggle({\n    compactMode,\n    setCompactMode,\n}: DisplayModeToggleProps) {\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1,\n                marginBottom: 2,\n            }}\n        >\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                Display Mode:\n            </Typography>\n            <IconButton onClick={() => setCompactMode(!compactMode)}>\n                {compactMode ? <ViewListRounded /> : <ViewModuleRounded />}\n            </IconButton>\n        </Box>\n    );\n}\n\nfunction Scrollable({ children }: { children: React.ReactNode }) {\n    return (\n        <GlassCard\n            sx={{\n                overflowX: 'auto',\n                width: '100%',\n                maxWidth: '100%',\n                height: '60px',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                padding: 2,\n            }}\n        >\n            <Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 1,\n                    width: 'max-content',\n                    minWidth: 0,\n                }}\n            >\n                {children}\n            </Box>\n        </GlassCard>\n    );\n}\n","import React, { useContext, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { TooltipButton } from '../helpers';\nimport { EditorContext } from './Editor';\nimport { useMobile } from '../hooks';\nimport { TIMER } from '../config/constants';\n\nimport {\n    NavigateBeforeRounded,\n    NavigateNextRounded,\n    PlayArrowRounded,\n    FirstPageRounded,\n    LastPageRounded,\n    PauseRounded,\n    InfoRounded,\n    HomeRounded,\n} from '../components/icons';\n\ninterface ButtonData {\n    icon: React.ElementType;\n    action?: string;\n    flag?: boolean;\n    props?: Record<string, unknown>;\n}\n\ninterface ToolbarPayload {\n    dispatch: (action: { type: string; payload: unknown }) => void;\n    nextIter: (action: {\n        type: string;\n        payload: unknown;\n    }) => Record<string, unknown>;\n    create: (config: { repeat: () => void; speed: number }) => void;\n    clear: () => void;\n    start: Record<string, unknown>;\n}\n\nexport interface ToolbarState {\n    end?: boolean;\n    pause?: boolean;\n    [key: string]: unknown;\n}\n\nexport interface ToolbarAction {\n    type: string;\n    payload: ToolbarPayload;\n}\n\nexport function Toolbar(): React.ReactElement[] {\n    const editorContext = useContext(EditorContext);\n    const notMobile = !useMobile('sm');\n\n    const link = editorContext\n        ? 'https://esolangs.org/wiki/' + editorContext.name.replace(' ', '_')\n        : '';\n    const pause = editorContext?.pause || false;\n    const dispatch = editorContext?.dispatch || (() => undefined);\n    const fastForward = editorContext?.fastForward || false;\n\n    const TimerButton = useMemo(\n        () =>\n            pause ? (\n                <TooltipButton\n                    key=\"Run\"\n                    title=\"Run\"\n                    onClick={dispatch('run')}\n                    Icon={PlayArrowRounded}\n                />\n            ) : (\n                <TooltipButton\n                    key=\"Pause\"\n                    title=\"Pause\"\n                    onClick={dispatch('stop')}\n                    Icon={PauseRounded}\n                />\n            ),\n        [dispatch, pause]\n    );\n\n    if (!editorContext) return [];\n\n    const buttonData: Record<string, ButtonData> = {\n        Reset: {\n            icon: FirstPageRounded,\n            action: 'reset',\n            flag: true,\n        },\n        'Fast Forward': {\n            icon: LastPageRounded,\n            flag: fastForward,\n            action: 'ff',\n        },\n        Previous: {\n            icon: NavigateBeforeRounded,\n            flag: notMobile,\n            action: 'prev',\n        },\n        Next: {\n            icon: NavigateNextRounded,\n            flag: notMobile,\n            action: 'next',\n        },\n        Info: {\n            icon: InfoRounded,\n            props: { href: link },\n        },\n        Home: {\n            icon: HomeRounded,\n            props: {\n                component: Link,\n                to: '/',\n            },\n        },\n    };\n\n    const buttons: React.ReactElement[] = [TimerButton];\n\n    for (const key in buttonData) {\n        const { icon, flag, action, props } = buttonData[key];\n\n        if (action && flag)\n            buttons.push(\n                <TooltipButton\n                    key={key}\n                    title={key}\n                    Icon={icon}\n                    onClick={dispatch(action)}\n                />\n            );\n        else if (props)\n            buttons.push(\n                <TooltipButton key={key} title={key} Icon={icon} {...props} />\n            );\n    }\n\n    return buttons;\n}\n\nfunction updateHandler(payload: ToolbarPayload) {\n    return (type: string, flag: boolean) => {\n        const { nextIter, clear } = payload;\n\n        if (flag) clear();\n\n        const result = nextIter({ type, payload });\n\n        return {\n            ...result,\n            select: null,\n        };\n    };\n}\n\nexport function handleToolbar(\n    state: ToolbarState,\n    action: ToolbarAction\n): ToolbarState {\n    const { type, payload } = action;\n    let newState: ToolbarState = {};\n\n    const { dispatch, nextIter, create, clear, start } = payload;\n\n    const update = updateHandler(payload);\n\n    const repeat = () => {\n        dispatch({\n            type: 'timer',\n            payload,\n        });\n    };\n\n    const pauseStateMap: Record<string, boolean> = {\n        run: false,\n        stop: true,\n        reset: true,\n        prev: true,\n    };\n\n    switch (type) {\n        case 'run':\n            create({ repeat, speed: TIMER.defaultSpeed });\n            newState.pause = pauseStateMap.run;\n            break;\n        case 'timer':\n            const newType = state.end ? 'stop' : 'next';\n\n            dispatch({\n                type: newType,\n                payload,\n            });\n            break;\n        case 'stop':\n            clear();\n            newState.pause = pauseStateMap.stop;\n            break;\n        case 'reset':\n            clear();\n\n            // For text editors, preserve the code and text, only reset execution state\n            const resetPayload = { ...state, ...start };\n\n            // Preserve text and code if they exist (for text editors)\n            if ('text' in state && 'code' in state) {\n                resetPayload.text = state.text;\n                resetPayload.code = state.code;\n            }\n\n            newState = nextIter({\n                type: 'clear',\n                payload: resetPayload,\n            }) as ToolbarState;\n            newState.pause = pauseStateMap.reset;\n            break;\n        case 'prev':\n            newState = update('prev', true) as ToolbarState;\n            newState.pause = pauseStateMap.prev;\n            break;\n        case 'next':\n            newState = update('next', false) as ToolbarState;\n            break;\n        default:\n            break;\n    }\n\n    return newState;\n}\n","import React, {\n    createContext,\n    useContext,\n    useMemo,\n    ReactNode,\n    RefObject,\n} from 'react';\nimport { Program, Output, Tape, Register } from './Display';\nimport { CustomGrid } from '../helpers';\nimport { Grid, Typography, TextField } from '../components/mui';\nimport { Toolbar } from './Toolbar';\nimport { COLORS, SPACING, TYPOGRAPHY } from '../config/theme';\nimport type { SxProps, Theme } from '@mui/material/styles';\n\ninterface EditorContextType {\n    name: string;\n    tapeFlag: boolean;\n    outFlag: boolean;\n    regFlag: boolean;\n    code: string[] | undefined;\n    index: number;\n    tape: number[];\n    pointer: number;\n    output: string[] | string;\n    register: number;\n    height: number;\n    size: number;\n    dispatch: (action: string | { type: string; payload: unknown }) => void;\n    fastForward: boolean;\n    pause: boolean;\n}\n\nexport const EditorContext = createContext<EditorContextType | null>(null);\n\ninterface EditorProps {\n    container?: RefObject<HTMLDivElement>;\n    sideProps?: TextAreaProps;\n    hide?: boolean;\n    children: ReactNode;\n}\n\nexport default function Editor({\n    container,\n    sideProps = {},\n    hide = false,\n    children,\n}: EditorProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) {\n        throw new Error('Editor must be used within EditorContext.Provider');\n    }\n\n    const { name, tapeFlag, outFlag, regFlag, code } = editorContext;\n\n    const rightProps = { xs: 6, md: 4 };\n    let display: string, leftProps: number | { xs: number; md: number };\n\n    if (hide) {\n        display = 'none';\n        leftProps = 12;\n    } else {\n        leftProps = { xs: 6, md: 8 };\n        display = 'flex';\n    }\n\n    const titleProps = {\n        sx: {\n            display: {\n                xs: 'none',\n                md: 'block',\n            },\n        },\n    };\n\n    const contentProps = {\n        flex: 1,\n        spacing: 2,\n        ref: container,\n        container: true,\n        display: 'flex',\n        alignItems: 'center',\n        sx: { overflowY: 'auto' },\n    };\n\n    return (\n        <Grid\n            container\n            spacing={2}\n            height=\"100vh\"\n            display=\"flex\"\n            flexDirection=\"column\"\n            padding=\"5vh 5vw 5vh 5vw\"\n            sx={{\n                background: COLORS.surface.background,\n                position: 'relative',\n            }}\n        >\n            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                <Grid {...titleProps}>\n                    <Typography\n                        variant=\"h4\"\n                        sx={{\n                            fontSize: TYPOGRAPHY.fontSize.h2,\n                            fontWeight: TYPOGRAPHY.fontWeight.semibold,\n                        }}\n                    >\n                        {name}\n                    </Typography>\n                </Grid>\n                <Grid display=\"flex\" alignItems=\"center\" gap={1}>\n                    <Toolbar />\n                </Grid>\n            </Grid>\n            <Grid {...contentProps}>\n                <Grid size={leftProps}>{children}</Grid>\n                <Grid display={display} size={rightProps}>\n                    <TextArea {...sideProps} />\n                </Grid>\n            </Grid>\n            <Grid\n                container\n                spacing={2}\n                sx={{ width: '100%', maxWidth: '100%' }}\n            >\n                {(() => {\n                    const fields: ReactNode[] = [];\n                    const fieldCount = [\n                        code !== undefined,\n                        tapeFlag,\n                        outFlag,\n                        regFlag,\n                    ].filter(Boolean).length;\n                    const gridSize =\n                        fieldCount === 1\n                            ? { xs: 12, md: 12 }\n                            : { xs: 12, md: 6 };\n\n                    if (code !== undefined) {\n                        fields.push(\n                            <Grid\n                                key=\"program\"\n                                size={gridSize}\n                                sx={{\n                                    width: '100%',\n                                    maxWidth: '100%',\n                                    overflow: 'hidden',\n                                }}\n                            >\n                                <Program />\n                            </Grid>\n                        );\n                    }\n                    if (tapeFlag) {\n                        fields.push(\n                            <Grid\n                                key=\"tape\"\n                                size={gridSize}\n                                sx={{\n                                    width: '100%',\n                                    maxWidth: '100%',\n                                    overflow: 'hidden',\n                                }}\n                            >\n                                <Tape />\n                            </Grid>\n                        );\n                    }\n                    if (outFlag) {\n                        fields.push(\n                            <Grid\n                                key=\"output\"\n                                size={gridSize}\n                                sx={{\n                                    width: '100%',\n                                    maxWidth: '100%',\n                                    overflow: 'hidden',\n                                }}\n                            >\n                                <Output />\n                            </Grid>\n                        );\n                    }\n                    if (regFlag) {\n                        fields.push(\n                            <Grid\n                                key=\"register\"\n                                size={gridSize}\n                                sx={{\n                                    width: '100%',\n                                    maxWidth: '100%',\n                                    overflow: 'hidden',\n                                }}\n                            >\n                                <Register />\n                            </Grid>\n                        );\n                    }\n\n                    return fields;\n                })()}\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface GridAreaProps {\n    handleClick: (pos: number) => () => void;\n    chooseColor: (pos: number) => string;\n    options: string[];\n    rows: number;\n    cols: number;\n}\n\nexport function GridArea({\n    handleClick,\n    chooseColor,\n    options,\n    rows,\n    cols,\n}: GridAreaProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) {\n        throw new Error('GridArea must be used within EditorContext.Provider');\n    }\n\n    const { size } = editorContext;\n\n    const cellStyles = useMemo(\n        () => ({\n            primary: {\n                bg: COLORS.surface.glass,\n                text: COLORS.primary.main,\n                border: `1px solid ${COLORS.primary.main}`,\n                hover: COLORS.interactive.selected,\n            },\n            info: {\n                bg: COLORS.interactive.focus,\n                text: COLORS.text.primary,\n                border: `1px solid ${COLORS.primary.main}`,\n                hover: COLORS.interactive.hover,\n            },\n            secondary: {\n                bg: COLORS.surface.glass,\n                text: COLORS.text.secondary,\n                border: `1px solid ${COLORS.border.subtle}`,\n                hover: COLORS.interactive.selected,\n            },\n        }),\n        []\n    );\n\n    const getCellStyles = useMemo(\n        () => (color: string) => {\n            return (\n                (cellStyles as Record<string, typeof cellStyles.secondary>)[\n                    color\n                ] || cellStyles.secondary\n            );\n        },\n        [cellStyles]\n    );\n\n    const cellProps = (row: number, col: number) => {\n        const pos = cols * row + col;\n        const color = chooseColor(pos);\n        const value = options[pos] || ' ';\n\n        const cellStyle = getCellStyles(color);\n\n        return {\n            color: cellStyle.text,\n            backgroundColor: cellStyle.bg,\n            onClick: handleClick(pos),\n            children: <Text text={value} />,\n            sx: {\n                borderRadius: SPACING.borderRadius.md,\n                border: cellStyle.border,\n                cursor: 'pointer',\n                transition: 'all 200ms cubic-bezier(0.4, 0, 0.2, 1)',\n                backdropFilter: 'blur(24px) saturate(180%)',\n                '&:hover': {\n                    backgroundColor: cellStyle.hover,\n                },\n            },\n        };\n    };\n\n    return (\n        <CustomGrid cellProps={cellProps} size={size} rows={rows} cols={cols} />\n    );\n}\n\ninterface TextAreaProps {\n    value?: string;\n    readOnly?: boolean;\n    infoLabel?: string;\n    fillValue?: string;\n    placeholder?: string;\n    handleChange?: (\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n    ) => void;\n}\n\nexport function TextArea({\n    value,\n    readOnly = false,\n    infoLabel = 'Program code',\n    fillValue = 'Hello, World!',\n    placeholder,\n    handleChange,\n}: TextAreaProps) {\n    const editorContext = useContext(EditorContext);\n    if (!editorContext) {\n        throw new Error('TextArea must be used within EditorContext.Provider');\n    }\n\n    const { height } = editorContext;\n    const rows = Math.floor(height / 32);\n\n    const isControlled = value !== undefined && value !== null;\n    const textFieldProps = isControlled\n        ? {\n              value: value || '',\n              onChange: handleChange,\n          }\n        : {\n              defaultValue: fillValue,\n              onChange: handleChange,\n          };\n\n    return (\n        <TextField\n            variant=\"outlined\"\n            label={infoLabel}\n            placeholder={placeholder}\n            slotProps={{\n                inputLabel: { shrink: true },\n                htmlInput: { readOnly },\n            }}\n            fullWidth\n            multiline\n            rows={rows}\n            {...textFieldProps}\n            sx={{\n                '& .MuiInputBase-root': {\n                    alignItems: 'flex-start',\n                    backgroundColor: COLORS.surface.glass,\n                    backdropFilter: 'blur(24px) saturate(180%)',\n                    borderRadius: SPACING.borderRadius.md,\n                    border: `1px solid ${COLORS.border.subtle}`,\n                },\n                '& .MuiInputBase-input': {\n                    fontFamily: 'monospace',\n                    color: 'text.primary',\n                    '&::placeholder': {\n                        opacity: 0.6,\n                        color: 'text.secondary',\n                    },\n                },\n                '& .MuiOutlinedInput-notchedOutline': {\n                    borderColor: COLORS.border.subtle,\n                },\n                '&:hover .MuiOutlinedInput-notchedOutline': {\n                    borderColor: COLORS.border.subtle,\n                },\n                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\n                    borderColor: 'primary.light',\n                },\n                '& .MuiInputLabel-root': {\n                    color: 'text.secondary',\n                },\n                '& .MuiInputLabel-root.Mui-focused': {\n                    color: 'primary.light',\n                },\n            }}\n        />\n    );\n}\n\ninterface TextProps {\n    text: string | number;\n    sx?: SxProps<Theme>;\n    [key: string]: unknown;\n}\n\nexport function Text({ text, ...props }: TextProps) {\n    return (\n        <Typography\n            {...props}\n            sx={{\n                fontSize: 'inherit',\n                fontWeight: 'inherit',\n                fontFamily: 'inherit',\n                userSelect: 'none',\n                lineHeight: 1,\n                display: 'inline',\n                ...props.sx,\n            }}\n        >\n            {text}\n        </Typography>\n    );\n}\n","import React, { useEffect, useCallback, useReducer, useMemo } from 'react';\nimport Editor, { EditorContext, TextArea } from '../Editor';\nimport { useTimer, useCache, useContainer } from '../../hooks';\nimport {\n    handleToolbar,\n    type ToolbarState,\n    type ToolbarAction,\n} from '../Toolbar';\nimport { PAGE_TITLES } from '../../config/constants';\n\ninterface TextEditorProps {\n    name: string;\n    start: Record<string, unknown>;\n    runner: (state: Record<string, unknown>) => Record<string, unknown>;\n    clean: (text: string) => string;\n    tape?: boolean;\n    output?: boolean;\n    register?: boolean;\n}\n\ninterface TextState extends ToolbarState {\n    text: string;\n    code: string;\n    tape?: number[];\n    output?: string;\n}\n\ninterface TextActionPayload {\n    nextIter: (action: {\n        type: string;\n        payload: unknown;\n    }) => Record<string, unknown>;\n    clear: () => void;\n    create: (config: { repeat: () => void; speed: number }) => void;\n    dispatch: (action: { type: string; payload: TextActionPayload }) => void;\n    start?: Record<string, unknown>;\n    newText?: string;\n    clean?: (text: string) => string;\n}\n\nfunction handleAction(\n    state: TextState,\n    action: { type: string; payload: TextActionPayload }\n): TextState {\n    const { type, payload } = action;\n    const { nextIter, clear, create, dispatch } = payload;\n    let newState: Partial<TextState> = {};\n\n    switch (type) {\n        case 'ff':\n            const repeat = () => dispatch({ type: 'timer', payload });\n\n            if (state.pause) {\n                newState = { pause: false };\n                create({ repeat, speed: 50 });\n            } else {\n                clear();\n                newState = { pause: false };\n                create({ repeat, speed: 10 });\n            }\n            break;\n        case 'edit':\n            const { newText, clean } = payload;\n\n            if (newText && clean) {\n                newState = {\n                    ...state,\n                    text: newText,\n                    code: clean(newText),\n                };\n\n                clear();\n                nextIter({\n                    type: 'clear',\n                    payload: newState,\n                });\n                newState.pause = true;\n            }\n            break;\n        default:\n            newState = handleToolbar(state, action as unknown as ToolbarAction);\n            break;\n    }\n\n    return {\n        ...state,\n        ...newState,\n    } as TextState;\n}\n\nexport default function TextEditor({\n    name,\n    start,\n    runner,\n    clean,\n    tape,\n    output,\n    register,\n}: TextEditorProps): React.ReactElement {\n    const containerRef = React.createRef<HTMLDivElement>();\n    const container = useContainer(containerRef);\n    const [state, dispatch] = useReducer(handleAction, {\n        ...start,\n        pause: true,\n        text: '',\n        code: '',\n    } as TextState);\n\n    const { create, clear } = useTimer(200);\n    const nextIter = useCache(runner as (state: unknown) => unknown);\n\n    useEffect(() => {\n        document.title = PAGE_TITLES.interpreter(name);\n    }, [name]);\n\n    const handleChange = useCallback(\n        (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n            dispatch({\n                type: 'edit',\n                payload: {\n                    newText: event.target.value,\n                    clean,\n                    nextIter: nextIter as unknown as (action: {\n                        type: string;\n                        payload: unknown;\n                    }) => Record<string, unknown>,\n                    clear,\n                    create,\n                    dispatch: dispatch as unknown as (action: {\n                        type: string;\n                        payload: TextActionPayload;\n                    }) => void,\n                },\n            });\n        },\n        [clean, nextIter, clear, create, dispatch]\n    );\n\n    const handleChangeWrapper = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n            handleChange(event as React.ChangeEvent<HTMLTextAreaElement>);\n        },\n        [handleChange]\n    );\n\n    const wrapDispatch = useCallback(\n        (type: string | { type: string; payload: unknown }) => {\n            if (typeof type === 'string') {\n                return () => {\n                    dispatch({\n                        type,\n                        payload: {\n                            start,\n                            nextIter: nextIter as unknown as (action: {\n                                type: string;\n                                payload: unknown;\n                            }) => Record<string, unknown>,\n                            dispatch,\n                            create,\n                            clear,\n                        },\n                    });\n                };\n            } else {\n                dispatch({\n                    type: type.type,\n                    payload: {\n                        ...(type.payload as TextActionPayload),\n                        start,\n                        nextIter: nextIter as unknown as (action: {\n                            type: string;\n                            payload: unknown;\n                        }) => Record<string, unknown>,\n                        dispatch,\n                        create,\n                        clear,\n                    },\n                });\n            }\n        },\n        [start, nextIter, create, clear, dispatch]\n    );\n\n    const context = useMemo(\n        () => ({\n            name,\n            tapeFlag: tape || false,\n            outFlag: output || false,\n            regFlag: register || false,\n            code: state.code ? [...state.code] : [],\n            index: (state.index as number) || 0,\n            tape: state.tape || [],\n            pointer: (state.pointer as number) || 0,\n            output: state.output || '',\n            register: (state.register as number) || 0,\n            height: container.height,\n            size: 0,\n            dispatch: wrapDispatch,\n            fastForward: true,\n            pause: state.pause || false,\n        }),\n        [\n            name,\n            tape,\n            output,\n            register,\n            state.code,\n            state.index,\n            state.tape,\n            state.pointer,\n            state.output,\n            state.register,\n            state.pause,\n            container.height,\n            wrapDispatch,\n        ]\n    );\n\n    const sideProps = {\n        readOnly: true,\n        infoLabel: 'RISC-V Equivalent',\n        fillValue: 'addi x0, x0, 0',\n        value: '',\n    };\n\n    return (\n        <EditorContext.Provider value={context}>\n            <Editor\n                hide\n                container={containerRef as React.RefObject<HTMLDivElement>}\n                sideProps={sideProps}\n            >\n                <TextArea\n                    value={state.text}\n                    placeholder=\"Enter your code here...\"\n                    handleChange={handleChangeWrapper}\n                />\n            </Editor>\n        </EditorContext.Provider>\n    );\n}\n","import TextEditor from './TextEditor';\nimport React, { useCallback } from 'react';\n\ninterface StunStepState {\n    pointer: number;\n    index: number;\n    tape: number[];\n    end: boolean;\n    code: string;\n}\n\ninterface StunStepStart {\n    pointer: number;\n    index: number;\n    tape: number[];\n    end: boolean;\n    code: string;\n}\n\nfunction clean(input: string): string {\n    let code = '';\n\n    for (const char of input) if ('+-><'.includes(char)) code += char;\n\n    return code;\n}\n\nfunction getState(state: StunStepState): StunStepState {\n    let { pointer, index, tape, end } = state;\n    const { code } = state;\n\n    if (end) {\n        if (!tape[pointer]) return state;\n        else end = false;\n    }\n\n    if (index === code.length)\n        return {\n            ...state,\n            index: 0,\n            end: true,\n        };\n\n    const char = code[index++];\n    tape = [...tape];\n\n    if (char === '+') {\n        tape[pointer]++;\n    } else if (tape[pointer]) {\n        if (char === '-') {\n            tape[pointer]--;\n        } else if (char === '>') {\n            if (tape.length === ++pointer) tape.push(1);\n        } else if (pointer) {\n            pointer--;\n        }\n    }\n\n    return {\n        pointer,\n        index,\n        code,\n        tape,\n        end,\n    };\n}\n\nexport default function Editor(): React.ReactElement {\n    const start: StunStepStart = {\n        pointer: 0,\n        index: 0,\n        tape: [0],\n        end: false,\n        code: '',\n    };\n\n    const memoizedRunner = useCallback(\n        (state: Record<string, unknown>) =>\n            getState(state as unknown as StunStepState) as unknown as Record<\n                string,\n                unknown\n            >,\n        []\n    );\n\n    const memoizedClean = useCallback((text: string) => clean(text), []);\n\n    return (\n        <TextEditor\n            name=\"Stun Step\"\n            start={start as unknown as Record<string, unknown>}\n            runner={memoizedRunner}\n            clean={memoizedClean}\n            tape\n        />\n    );\n}\n","import TextEditor from './TextEditor';\nimport React, { useCallback } from 'react';\n\ninterface SuffolkState {\n    register: number;\n    pointer: number;\n    output: string;\n    index: number;\n    tape: number[];\n    end: boolean;\n    code: string;\n}\n\ninterface SuffolkStart {\n    register: number;\n    pointer: number;\n    output: string;\n    index: number;\n    tape: number[];\n    end: boolean;\n    code: string;\n}\n\nfunction cleanInput(input: string): string {\n    let code = '';\n\n    for (const char of input) if ('><!,.'.includes(char)) code += char;\n\n    return code;\n}\n\nfunction getState(state: SuffolkState): SuffolkState {\n    let { register, pointer, output, index, tape, end } = state;\n    const { code } = state;\n\n    if (end) end = false;\n\n    if (index === code.length)\n        return {\n            ...state,\n            index: 0,\n            end: true,\n        };\n\n    const char = code[index++];\n    tape = [...tape];\n\n    switch (char) {\n        case '>':\n            if (tape.length === ++pointer) tape.push(0);\n            break;\n        case '<':\n            register += tape[pointer];\n            pointer = 0;\n            break;\n        case '!':\n            tape[pointer] -= register - 1;\n\n            if (tape[pointer] < 0) tape[pointer] = 0;\n\n            register = 0;\n            pointer = 0;\n            break;\n        case ',':\n            const input = prompt('Input: ');\n\n            if (input && input.length) register = input.charCodeAt(0);\n            else register = 0;\n            break;\n        case '.':\n            if (register > 0) output += String.fromCharCode(register - 1);\n            break;\n        default:\n            break;\n    }\n\n    return {\n        register,\n        pointer,\n        output,\n        index,\n        code,\n        tape,\n        end,\n    };\n}\n\nexport default function Editor(): React.ReactElement {\n    const start: SuffolkStart = {\n        register: 0,\n        pointer: 0,\n        output: '',\n        index: 0,\n        tape: [0],\n        end: false,\n        code: '',\n    };\n\n    const memoizedRunner = useCallback(\n        (state: Record<string, unknown>) =>\n            getState(state as unknown as SuffolkState) as unknown as Record<\n                string,\n                unknown\n            >,\n        []\n    );\n\n    const memoizedClean = useCallback((text: string) => cleanInput(text), []);\n\n    return (\n        <TextEditor\n            name=\"Suffolk\"\n            start={start as unknown as Record<string, unknown>}\n            runner={memoizedRunner}\n            clean={memoizedClean}\n            tape\n            output\n            register\n        />\n    );\n}\n","import { gridMove, getDirection } from '../../calculate';\nimport {\n    handleToolbar,\n    type ToolbarState,\n    type ToolbarAction,\n} from '../Toolbar';\n\ninterface GridState {\n    grid: string;\n    select: number | null;\n    rows: number;\n    cols: number;\n    pause?: boolean;\n}\n\ninterface KeysPayload {\n    key: string;\n    resetState: (grid: string) => void;\n}\n\ninterface ResizePayload {\n    resetState: (grid: string) => void;\n    rows?: number;\n    cols?: number;\n}\n\nfunction handleKeys(\n    state: GridState,\n    payload: KeysPayload\n): Partial<GridState> {\n    let { grid, select } = state;\n    let value: string;\n\n    const { key, resetState } = payload;\n\n    if (select === null) return {};\n\n    if (key.includes('Arrow')) {\n        const arrow = getDirection(key);\n        const { rows, cols } = state;\n\n        select = gridMove(select, arrow, rows, cols);\n        return { select };\n    }\n\n    if (key === 'Backslash' || key === '\\\\') {\n        value = '\\\\';\n    } else if (key.length === 1) {\n        value = key;\n    } else if (key === 'Backspace' || key === 'Delete') {\n        value = ' ';\n    } else {\n        return {};\n    }\n\n    const before = grid.slice(0, select);\n    const after = grid.slice(select + 1);\n\n    grid = before + value + after;\n    resetState(grid);\n\n    return { grid, pause: true };\n}\n\nfunction handleResize(\n    state: GridState,\n    payload: ResizePayload\n): Partial<GridState> {\n    const { resetState, ...rest } = payload;\n    let { grid } = state;\n    const { rows, cols } = state;\n    let resize = '';\n\n    const { rows: newRows, cols: newCols } = rest;\n\n    if (newRows !== undefined && newRows > rows) {\n        const diff = newRows - rows;\n        const prod = diff * cols;\n\n        grid += ' '.repeat(prod);\n    }\n\n    const finalRows = newRows !== undefined ? newRows : rows;\n    const finalCols = newCols !== undefined ? newCols : cols;\n\n    for (let k = 0; k < finalRows; k++) {\n        const start = k * cols;\n        let end = start;\n\n        if (newCols !== undefined && newCols > cols) end += cols;\n        else end += newCols !== undefined ? newCols : cols;\n\n        resize += grid.substring(start, end).padEnd(finalCols, ' ');\n    }\n\n    resetState(resize);\n\n    return {\n        ...rest,\n        grid: resize,\n        pause: true,\n    };\n}\n\nexport function handleAction(\n    state: GridState,\n    action: { type: string; payload: unknown }\n) {\n    const { type, payload } = action;\n    let newState = {};\n\n    switch (type) {\n        case 'edit':\n            newState = handleKeys(state, payload as KeysPayload);\n            break;\n        case 'resize':\n            newState = handleResize(state, payload as ResizePayload);\n            break;\n        case 'click':\n            const { select } = payload as { select: number };\n            newState = select === state.select ? { select: null } : { select };\n            break;\n        default:\n            newState = handleToolbar(\n                state as unknown as ToolbarState,\n                action as ToolbarAction\n            );\n            break;\n    }\n\n    return {\n        ...state,\n        ...newState,\n    };\n}\n\n// Export both for compatibility\nexport { handleAction as handleGrid };\n","import React, {\n    useRef,\n    useEffect,\n    useReducer,\n    useCallback,\n    useMemo,\n} from 'react';\nimport Editor, { EditorContext, GridArea } from '../Editor';\nimport { convertPixels } from '../../calculate';\nimport { handleAction } from './eventHandlers';\nimport { PAGE_TITLES } from '../../config/constants';\n\nimport {\n    useContainer,\n    useTimer,\n    useKeys,\n    useCache,\n    useMobile,\n} from '../../hooks';\n\ninterface GridEditorProps {\n    name: string;\n    start: any;\n    runner: (state: any) => any;\n    tape?: boolean;\n    output?: boolean;\n    register?: boolean;\n}\n\ninterface GridState {\n    grid: string;\n    select: number | null;\n    pause: boolean;\n    rows: number;\n    cols: number;\n    position?: number | null;\n    [key: string]: unknown;\n}\n\ninterface WrapperPayload {\n    start: any;\n    resetState: (grid: string) => any;\n    nextIter: (action: any) => any;\n    dispatch: (action: { type: string; payload?: unknown }) => void;\n    create: (config: { repeat: () => void; speed: number }) => void;\n    clear: () => void;\n}\n\nfunction useWrappers(\n    state: GridState,\n    props: GridEditorProps,\n    dispatch: (action: any) => void\n) {\n    const { runner, start } = props;\n    const { rows, cols } = state;\n\n    const { create, clear } = useTimer(200);\n    const nextIter = useCache(runner);\n\n    const resetState = useCallback(\n        (grid: string) => {\n            clear();\n\n            return nextIter({\n                type: 'clear',\n                payload: {\n                    ...start,\n                    grid,\n                    rows,\n                    cols,\n                },\n            });\n        },\n        [start, clear, nextIter, rows, cols]\n    );\n\n    const handleClick = useCallback(\n        (select: number) => () => {\n            dispatch({\n                type: 'click',\n                payload: { select },\n            });\n        },\n        [dispatch]\n    );\n\n    const chooseColor = useCallback(\n        (square: number) => {\n            const { position, select } = state;\n\n            if (square === select) return 'primary';\n            if (position !== null && square === position) return 'info';\n\n            return 'secondary';\n        },\n        [state]\n    );\n\n    const wrapDispatch = useCallback(\n        (type: string) => () => {\n            const payload: WrapperPayload = {\n                start,\n                resetState,\n                nextIter,\n                dispatch,\n                create,\n                clear,\n            };\n\n            dispatch({ type, payload });\n        },\n        [resetState, nextIter, dispatch, create, clear, start]\n    );\n\n    return {\n        resetState,\n        handleClick,\n        chooseColor,\n        wrapDispatch,\n    };\n}\n\nexport default function GridEditor(props: GridEditorProps): React.ReactElement {\n    const { create: createKeys, clear: clearKeys } = useKeys();\n\n    const { name, start, tape, output, register } = props;\n\n    const container = useRef<HTMLDivElement>(null);\n    let { height, width } = useContainer(container);\n\n    const mobile = useMobile('sm');\n    const size = mobile ? 4 : 6;\n    const hide = true;\n\n    height = (height || 400) * 0.8;\n    width = (width || 600) * 0.95;\n\n    if (!hide) {\n        if (mobile) width /= 2;\n        else width /= 1.5;\n    }\n\n    const { rows, cols } = useMemo(\n        () => convertPixels(size, height, width),\n        [size, height, width]\n    );\n\n    const initial: GridState = {\n        ...start,\n        grid: ' '.repeat(rows * cols),\n        select: null,\n        pause: true,\n        rows,\n        cols,\n    };\n\n    const [state, dispatch] = useReducer(handleAction as any, initial);\n\n    const { resetState, handleClick, chooseColor, wrapDispatch } = useWrappers(\n        state,\n        props,\n        dispatch\n    );\n\n    useEffect(() => {\n        dispatch({\n            type: 'resize',\n            payload: {\n                rows,\n                cols,\n                resetState,\n            },\n        });\n    }, [rows, cols, resetState]);\n\n    useEffect(() => {\n        document.title = PAGE_TITLES.interpreter(name);\n\n        const wrapper = (event: KeyboardEvent) => {\n            dispatch({\n                type: 'edit',\n                payload: {\n                    key: event.key,\n                    resetState,\n                },\n            });\n        };\n\n        createKeys(wrapper);\n\n        return () => clearKeys();\n    }, [name, createKeys, resetState, clearKeys]);\n\n    const context = {\n        name,\n        size,\n        ...state,\n        dispatch: wrapDispatch,\n        tapeFlag: tape || false,\n        outFlag: output || false,\n        regFlag: register || false,\n        height: height / 0.8,\n        index: 0,\n        tape: [],\n        pointer: 0,\n        output: '',\n        register: 0,\n        code: undefined,\n        fastForward: false,\n        pause: state.pause || false,\n    };\n\n    return (\n        <EditorContext.Provider value={context as any}>\n            <Editor hide={hide} container={container as any}>\n                <GridArea\n                    rows={rows}\n                    cols={cols}\n                    options={state.grid?.split('') || []}\n                    handleClick={handleClick}\n                    chooseColor={chooseColor}\n                />\n            </Editor>\n        </EditorContext.Provider>\n    );\n}\n","import { gridMove } from '../../calculate';\nimport GridEditor from './GridEditor';\nimport React from 'react';\n\ninterface WII2DState {\n    position: number | null;\n    velocity: number;\n    output: string;\n    register: number;\n    end: boolean;\n    grid: string;\n    rows: number;\n    cols: number;\n}\n\ninterface WII2DStart {\n    position: null;\n    velocity: number;\n    end: boolean;\n    output: string;\n    register: number;\n}\n\nfunction getDistance(x: number, y: number, cols: number): number {\n    let xPos = x;\n    let yPos = y;\n    const xWidth = xPos % cols;\n    const yWidth = yPos % cols;\n    xPos -= xWidth;\n    yPos -= yWidth;\n\n    const differ = Math.abs(xPos - yPos);\n    const height = Math.floor(differ / cols);\n    const width = Math.abs(xWidth - yWidth);\n\n    return height + width;\n}\n\nfunction getComparison(position: number, cols: number) {\n    return (x: number, y: number) =>\n        getDistance(position, x, cols) - getDistance(position, y, cols);\n}\n\nfunction getClosest(position: number, grid: string, cols: number): number {\n    const warp: number[] = [];\n\n    for (let k = 0; k < grid.length; k++) if (grid[k] === '@') warp.push(k);\n\n    if (warp.length === 1) return position;\n\n    const compare = getComparison(position, cols);\n\n    warp.sort(compare);\n    return warp[1];\n}\n\nfunction getState(state: WII2DState): WII2DState {\n    const arrows = '^<>v';\n\n    let { position, velocity, output, register, end } = state;\n    const { grid, rows, cols } = state;\n\n    if (end) return state;\n\n    if (position === null) {\n        const index = grid.indexOf('!');\n        const double = grid.lastIndexOf('!');\n\n        if (index === -1 || index !== double) return { ...state, end: true };\n\n        position = index;\n    }\n\n    const char = grid[position];\n\n    if (arrows.includes(char)) {\n        const index = arrows.indexOf(char);\n        velocity = (index % 2) + 1;\n\n        if (index < 2) velocity -= 3;\n    } else if (+char) {\n        register = +char;\n    }\n\n    switch (char) {\n        case '|':\n            velocity *= -1;\n            break;\n        case '@':\n            position = getClosest(position, grid, cols);\n            position -= cols;\n\n            if (position < 0) position += rows * cols;\n            break;\n        case '+':\n            register++;\n            break;\n        case '-':\n            register--;\n            break;\n        case '*':\n            register *= 2;\n            break;\n        case 's':\n            register *= register;\n            break;\n        case '/':\n            register = Math.floor(register / 2);\n            break;\n        case '~':\n            output += String.fromCharCode(register);\n            break;\n        case '?':\n            const rand = Math.random() * 4;\n            const floor = Math.floor(rand);\n            velocity = floor - 2 + (floor > 1 ? 1 : 0);\n            break;\n        case '.':\n            position = null;\n            end = true;\n            break;\n        default:\n            break;\n    }\n\n    if (position !== null && char !== '@')\n        position = gridMove(position, velocity, rows, cols);\n\n    return {\n        position,\n        velocity,\n        grid,\n        output,\n        register,\n        end,\n        rows,\n        cols,\n    };\n}\n\nexport default function Editor(): React.ReactElement {\n    const start: WII2DStart = {\n        position: null,\n        velocity: -2,\n        end: false,\n        output: '',\n        register: 0,\n    };\n\n    return (\n        <GridEditor\n            name=\"WII2D\"\n            start={start}\n            runner={getState}\n            output\n            register\n        />\n    );\n}\n\n","import { gridMove } from '../../calculate';\nimport GridEditor from './GridEditor';\nimport React from 'react';\n\ninterface BackState {\n    velocity: number;\n    position: number | null;\n    pointer: number;\n    tape: number[];\n    end: boolean;\n    grid: string;\n    rows: number;\n    cols: number;\n}\n\ninterface BackStart {\n    velocity: number;\n    pointer: number;\n    position: number;\n    tape: number[];\n    end: boolean;\n}\n\nfunction getState(state: BackState): BackState {\n    let { velocity, position, pointer, tape, end } = state;\n    const { grid, rows, cols } = state;\n\n    if (end || position === null) return state;\n\n    const sum = velocity > 0 ? 3 : -3;\n    const char = grid[position];\n    tape = [...tape];\n\n    switch (char) {\n        case '\\\\':\n            velocity = sum - velocity;\n            break;\n        case '/':\n            velocity -= sum;\n            break;\n        case '<':\n            if (pointer) pointer--;\n            break;\n        case '>':\n            if (++pointer === tape.length) tape.push(0);\n            break;\n        case '-':\n            tape[pointer] ^= 1;\n            break;\n        case '+':\n            let next: string;\n\n            if (!tape[pointer])\n                do {\n                    position = gridMove(position, velocity, rows, cols);\n\n                    next = grid[position];\n                } while (!'\\\\/<>-+*'.includes(next));\n            break;\n        case '*':\n            position = null;\n            end = true;\n            break;\n        default:\n            break;\n    }\n\n    if (position !== null) position = gridMove(position, velocity, rows, cols);\n\n    return {\n        velocity,\n        position,\n        pointer,\n        grid,\n        tape,\n        rows,\n        cols,\n        end,\n    };\n}\n\nexport default function Editor(): React.ReactElement {\n    const start: BackStart = {\n        velocity: 1,\n        pointer: 0,\n        position: 0,\n        tape: [0],\n        end: false,\n    };\n\n    return <GridEditor name=\"Back\" start={start} runner={getState} tape />;\n}\n","import { ROUTES } from '../config/constants';\n\nexport { default as Stun_Step } from './Text/StunStep';\nexport { default as Suffolk } from './Text/Suffolk';\nexport { default as WII2D } from './Grid/WII2D';\nexport { default as Back } from './Grid/Back';\n\nexport const interpreters = ROUTES.interpreters;\n\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useMediaQuery } from './components/mui';\nimport { PROCESSING } from './config/constants';\n\ninterface Size {\n    width: number;\n    height: number;\n}\n\ninterface RefObject<T> {\n    current: T | null;\n}\n\nfunction getWindow(): Size {\n    const { innerWidth: width, innerHeight: height } = window;\n\n    return { width, height };\n}\n\nfunction getContainer(container: RefObject<HTMLElement> | null): Size {\n    if (!container || !container.current) return getWindow();\n\n    const { offsetHeight: height, offsetWidth: width } = container.current;\n\n    return { width, height };\n}\n\nfunction useSize(getSize: () => Size) {\n    const [size, setSize] = useState<Size>(getSize());\n\n    const { addEventListener: addEvent, removeEventListener: removeEvent } =\n        window;\n\n    useEffect(() => {\n        function handleResize() {\n            setSize(getSize());\n        }\n\n        addEvent('resize', handleResize);\n\n        return () => removeEvent('resize', handleResize);\n    }, [getSize, addEvent, removeEvent]);\n\n    return { size, setSize };\n}\n\nexport function useContainer(container: RefObject<HTMLElement> | null): Size {\n    const initialSize = getContainer(container);\n    const [size, setSize] = useState<Size>(initialSize);\n    const prevSizeRef = useRef<Size>(initialSize);\n\n    useEffect(() => {\n        const newSize = getContainer(container);\n        // Only update if values actually changed\n        if (\n            newSize.width !== prevSizeRef.current.width ||\n            newSize.height !== prevSizeRef.current.height\n        ) {\n            prevSizeRef.current = newSize;\n            setSize(newSize);\n        }\n    }, [container]);\n\n    useEffect(() => {\n        function handleResize() {\n            const newSize = getContainer(container);\n            setSize(prevSize => {\n                // Only update if values actually changed\n                if (\n                    newSize.width !== prevSize.width ||\n                    newSize.height !== prevSize.height\n                ) {\n                    return newSize;\n                }\n                return prevSize;\n            });\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, [container]);\n\n    return size;\n}\n\nexport function useWindow(): Size {\n    const { size } = useSize(getWindow);\n\n    return size;\n}\n\nexport function useMobile(size: string): boolean {\n    return useMediaQuery((theme: unknown) => {\n        const muiTheme = theme as {\n            breakpoints: { down: (size: string) => string };\n        };\n        return muiTheme.breakpoints.down(size);\n    });\n}\n\n// Global timer reference to handle React StrictMode multiple instances\nlet globalTimer: NodeJS.Timeout | null = null;\nlet globalRepeat: (() => void) | null = null;\nlet globalSpeed = 200;\n\ninterface TimerConfig {\n    repeat?: (() => void) | null;\n    speed?: number;\n}\n\nexport function useTimer(delay: number) {\n    const repeat = useRef<(() => void) | null>(null);\n    const speed = useRef<number>(delay);\n\n    const create = useCallback(\n        ({ repeat: newRepeat, speed: newSpeed }: TimerConfig) => {\n            // Clear any existing timer first\n            if (globalTimer !== null) {\n                clearInterval(globalTimer);\n            }\n\n            globalRepeat = newRepeat || globalRepeat;\n            globalSpeed = newSpeed || globalSpeed;\n            repeat.current = globalRepeat;\n            speed.current = globalSpeed;\n\n            // Only create timer if we have a valid repeat function\n            if (globalRepeat) {\n                globalTimer = setInterval(globalRepeat, globalSpeed);\n            }\n        },\n        []\n    );\n\n    const clear = useCallback(() => {\n        if (globalTimer !== null) {\n            clearInterval(globalTimer);\n            globalTimer = null;\n        }\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            if (globalTimer !== null) {\n                clearInterval(globalTimer);\n                globalTimer = null;\n            }\n        };\n    }, []);\n\n    return { create, clear };\n}\n\nexport function useKeys() {\n    const oldHandler = useRef<((event: KeyboardEvent) => void) | null>(null);\n\n    const create = useCallback((handler: (event: KeyboardEvent) => void) => {\n        oldHandler.current = handler;\n\n        document.addEventListener('keydown', handler);\n    }, []);\n\n    const clear = useCallback((handler?: (event: KeyboardEvent) => void) => {\n        const targetHandler = handler || oldHandler.current;\n\n        if (targetHandler) {\n            document.removeEventListener('keydown', targetHandler);\n        }\n    }, []);\n\n    useEffect(() => {\n        return () => {\n            if (oldHandler.current) {\n                document.removeEventListener('keydown', oldHandler.current);\n            }\n        };\n    }, []);\n\n    return { create, clear };\n}\n\ninterface CacheAction {\n    type: 'next' | 'prev' | 'clear';\n    payload: unknown;\n}\n\nexport function useCache(getState: (state: unknown) => unknown) {\n    const cache = useRef<unknown[]>([]);\n    const index = useRef<number>(0);\n    const processingRef = useRef<boolean>(false);\n    const getStateRef = useRef(getState);\n\n    // Update the ref whenever getState changes\n    useEffect(() => {\n        getStateRef.current = getState;\n    }, [getState]);\n\n    return useCallback(({ type, payload }: CacheAction): unknown => {\n        const states = cache.current;\n\n        switch (type) {\n            case 'next':\n                // Prevent double processing in React StrictMode\n                if (\n                    PROCESSING.doubleProcessingPrevention &&\n                    processingRef.current\n                ) {\n                    return { ...(states[index.current] as object) };\n                }\n\n                if (PROCESSING.doubleProcessingPrevention) {\n                    processingRef.current = true;\n                }\n\n                const curr = index.current;\n\n                if (curr + 1 === states.length) {\n                    const state = states[curr];\n                    const next = getStateRef.current(state);\n\n                    if (next === state) {\n                        // No change, stay at current position\n                    } else {\n                        // Add new state and move to it\n                        states.push(next);\n                        index.current++;\n                    }\n                } else {\n                    index.current++;\n                }\n\n                const result = { ...(states[index.current] as object) };\n\n                // Reset processing flag after a short delay\n                if (PROCESSING.doubleProcessingPrevention) {\n                    setTimeout(() => {\n                        processingRef.current = false;\n                    }, PROCESSING.resetDelay);\n                }\n\n                return result;\n            case 'prev':\n                // Prevent double processing in React StrictMode\n                if (\n                    PROCESSING.doubleProcessingPrevention &&\n                    processingRef.current\n                ) {\n                    return { ...(states[index.current] as object) };\n                }\n\n                if (PROCESSING.doubleProcessingPrevention) {\n                    processingRef.current = true;\n                }\n\n                if (index.current) index.current--;\n\n                const prevResult = { ...(states[index.current] as object) };\n\n                // Reset processing flag after a short delay\n                if (PROCESSING.doubleProcessingPrevention) {\n                    setTimeout(() => {\n                        processingRef.current = false;\n                    }, PROCESSING.resetDelay);\n                }\n\n                return prevResult;\n            case 'clear':\n                cache.current = [{ ...(payload as object) }];\n                index.current = 0;\n\n                break;\n            default:\n                break;\n        }\n\n        return payload;\n    }, []);\n}\n"],"names":["TypedGlassCard","GlassCard","Program","memo","_ref","compact","editorContext","useContext","EditorContext","code","index","undefined","_jsx","CompactDisplay","Icon","CodeRounded","title","data","pointer","Display","children","Text","text","Tape","_ref2","tape","tapeFlag","DataArrayRounded","Output","_ref3","output","outFlag","outputArray","Array","isArray","TextFieldsRounded","Register","_ref4","register","regFlag","PlusOneRounded","_ref5","values","map","val","ind","color","sx","fontSize","TYPOGRAPHY","body","fontWeight","semibold","fontFamily","_jsxs","Box","height","display","alignItems","gap","marginBottom","COLORS","primary","main","Typography","variant","Scrollable","_ref6","Chip","label","String","size","backgroundColor","surface","glass","caption","border","concat","subtle","backdropFilter","minHeight","flexWrap","_ref8","overflowX","width","maxWidth","flexDirection","justifyContent","padding","minWidth","Toolbar","notMobile","useMobile","link","name","replace","pause","dispatch","fastForward","TimerButton","useMemo","TooltipButton","onClick","PlayArrowRounded","PauseRounded","buttonData","Reset","icon","FirstPageRounded","action","flag","LastPageRounded","Previous","NavigateBeforeRounded","Next","NavigateNextRounded","Info","InfoRounded","props","href","Home","HomeRounded","component","Link","to","buttons","key","push","_objectSpread","handleToolbar","state","type","payload","newState","nextIter","create","clear","start","update","result","select","updateHandler","repeat","pauseStateMap","speed","TIMER","defaultSpeed","newType","end","resetPayload","createContext","Editor","container","sideProps","hide","Error","leftProps","xs","md","contentProps","flex","spacing","ref","overflowY","Grid","background","position","h2","TextArea","fields","gridSize","filter","Boolean","length","overflow","GridArea","handleClick","chooseColor","options","rows","cols","cellStyles","bg","hover","interactive","selected","info","focus","secondary","getCellStyles","CustomGrid","cellProps","row","col","pos","value","cellStyle","borderRadius","SPACING","cursor","transition","readOnly","infoLabel","fillValue","placeholder","handleChange","Math","floor","textFieldProps","onChange","defaultValue","TextField","slotProps","inputLabel","shrink","htmlInput","fullWidth","multiline","opacity","borderColor","_objectWithoutProperties","_excluded","userSelect","lineHeight","handleAction","newText","clean","TextEditor","runner","containerRef","React","useContainer","useReducer","useTimer","useCache","useEffect","document","PAGE_TITLES","interpreter","useCallback","event","target","handleChangeWrapper","wrapDispatch","context","Provider","memoizedRunner","char","getState","memoizedClean","input","includes","prompt","charCodeAt","fromCharCode","cleanInput","grid","resetState","arrow","getDirection","gridMove","before","slice","after","handleKeys","rest","resize","newRows","newCols","finalRows","finalCols","k","substring","padEnd","handleResize","GridEditor","_state$grid","createKeys","clearKeys","useKeys","useRef","mobile","convertPixels","initial","square","useWrappers","split","getDistance","x","y","xPos","yPos","xWidth","yWidth","differ","abs","getClosest","warp","compare","getComparison","sort","arrows","velocity","indexOf","double","lastIndexOf","rand","random","sum","next","ROUTES","interpreters","getWindow","innerWidth","innerHeight","window","getContainer","current","offsetHeight","offsetWidth","initialSize","setSize","useState","prevSizeRef","newSize","prevSize","addEventListener","removeEventListener","useWindow","getSize","addEvent","removeEvent","useSize","useMediaQuery","theme","breakpoints","down","globalTimer","globalRepeat","globalSpeed","delay","newRepeat","newSpeed","clearInterval","setInterval","oldHandler","handler","targetHandler","cache","processingRef","getStateRef","states","PROCESSING","doubleProcessingPrevention","curr","setTimeout","resetDelay","prevResult"],"sourceRoot":""}