{"version":3,"sources":["helpers.js","Buttons.js","Grid.js","back.js","Home.js","index.js"],"names":["emptyArray","size","arr","Array","fill","map","x","pairEquals","y","Buttons","props","run","set","className","type","onClick","curr","select","pointer","breaks","output","tape","cell","num","length","push","grid","pop","navigator","clipboard","writeText","join","to","Grid","changeText","bind","state","mode","temp","this","every","e","includes","alert","setState","func","code","row","col","end","pos","vel","ind","back","a","b","c","obj","value","key","document","addEventListener","removeEventListener","val","changeColor","bgcolor","chooseColor","tile","style","fontSize","textAlign","href","m","runCode","s","color","React","Component","Home","action","display","App","basename","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4aee7397.chunk.js","sourcesContent":["export function emptyArray(size) {\r\n    let arr = Array(size).fill(' ');\r\n    return arr.map(x => [...arr]);\r\n}\r\n\r\nexport function pairEquals(x, y) {\r\n    if (x === null || y === null)\r\n        return x === y;\r\n\r\n    return x[0] === y[0]\r\n        && x[1] === y[1];\r\n}","import {Link} from 'react-router-dom';\r\n\r\nexport default function Buttons(props) {\r\n    let {run, set, arr} = props;\r\n\r\n    return (<div>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={run('run')}>\r\n            ‚ñ∂\r\n        </button>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={run('back')}>\r\n            &nbsp;‚ùÆ&nbsp;\r\n        </button>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={run('fore')}>\r\n            &nbsp;‚ùØ&nbsp;\r\n        </button>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={() => set({curr: {\r\n                        select: null,\r\n                        pointer: null,\r\n                        breaks: []\r\n                    },\r\n                    output: {\r\n                        tape: [],\r\n                        cell: 0\r\n                    }})}>\r\n            ‚úñ\r\n        </button>\r\n        <br />\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={() => {\r\n                    let num = arr.length + 1;\r\n\r\n                    arr.map(x => x.push(' '));\r\n                    arr.push(Array(num).fill(' '));\r\n                    set({size: num, grid: arr});\r\n                }}>\r\n            ‚ûï&#xfe0e;\r\n        </button>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={() => {\r\n                    let num = arr.length - 1;\r\n                    if (!num) return;\r\n\r\n                    arr.pop();\r\n                    arr.map(x => x.pop());\r\n                    set({size: num, grid: arr});\r\n                }}>\r\n            ‚ûñ&#xfe0e;\r\n        </button>\r\n        <button className='custom'\r\n                type='button'\r\n                onClick={() => {\r\n                    navigator.clipboard.writeText(\r\n                        arr.map(x => x.join(''))\r\n                           .join('\\n')\r\n                )}}>\r\n            üì•&#xfe0e;\r\n        </button>\r\n        <Link to='/'>\r\n            <button className='custom'\r\n                    type='button'>\r\n                üè†&#xfe0e;\r\n            </button>\r\n        </Link>\r\n    </div>);\r\n}","import {emptyArray, pairEquals} from './helpers';\r\nimport Buttons from './Buttons';\r\nimport React from 'react';\r\nimport run from './back';\r\n\r\nexport default class Grid extends React.Component {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.changeText =\r\n            this.changeText\r\n                .bind(this);\r\n        let size = 5;\r\n\r\n        this.state = {\r\n            output: {tape: []},\r\n            grid: emptyArray(size),\r\n            size,\r\n            curr: {\r\n                select: null,\r\n                pointer: null,\r\n                breaks: []\r\n            }\r\n        };\r\n    }\r\n\r\n    runCode(mode) {\r\n        return function() {\r\n            let curr = this.state.curr;\r\n            curr.select = null;\r\n\r\n            if (this.state.grid.every(e => !e.includes('*'))) {\r\n                alert('No halt instruction detected!');\r\n                this.setState({curr: curr});\r\n                return;\r\n            }\r\n\r\n            if (curr.pointer === null) {\r\n                this.func = run(this.state.grid);\r\n                if (mode !== 'run') {\r\n                    curr.pointer = [0, 0];\r\n                    this.setState({\r\n                        curr: curr,\r\n                        output: {\r\n                            tape: [0],\r\n                            cell: 0\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n\r\n            let temp;\r\n            this.setState({curr: curr});\r\n\r\n            if (mode === 'run')\r\n                do {\r\n                    temp = this.func();\r\n                } while (!temp.end);\r\n            else if (mode === 'fore')\r\n                temp = this.func();\r\n            else if (mode === 'back')\r\n                temp = this.func(true);\r\n\r\n            let {pos, end, tape, cell} = temp;\r\n            curr.pointer = end ? null : pos;\r\n\r\n            this.setState({\r\n                curr: curr,\r\n                output: {\r\n                    tape: tape,\r\n                    cell: cell\r\n                }\r\n            });\r\n        }.bind(this);\r\n    }\r\n\r\n    changeText(e) {\r\n        let obj = this.state.curr;\r\n\r\n        if (obj.select !== null) {\r\n            let arr = this.state.grid;\r\n            let [row, col] = obj.select;\r\n            let value;\r\n\r\n            if (e.key.length === 1) {\r\n                value = e.key;\r\n            } else if (e.key === 'Backspace'\r\n                    || e.key === 'Delete') {\r\n                value = ' ';\r\n            } else if (e.key.includes('Arrow')) {\r\n                if (e.key.includes('Left'))\r\n                    col -= 1;\r\n                else if (e.key.includes('Right'))\r\n                    col += 1;\r\n                else if (e.key.includes('Up'))\r\n                    row -= 1;\r\n                else\r\n                    row += 1;\r\n\r\n                let size = this.state.size;\r\n                row = (row + size) % size;\r\n                col = (col + size) % size;\r\n                obj.select = [row, col];\r\n                this.setState({curr: obj});\r\n\r\n                return;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            arr[row][col] = value;\r\n            this.setState({grid: arr});\r\n        }\r\n    }\r\n\r\n    changeColor(pos) {\r\n        return function() {\r\n            let curr = this.state.curr;\r\n            curr.select =\r\n                pairEquals(\r\n                        curr.select,\r\n                        pos)\r\n                    ? null : pos;\r\n            this.setState({curr: curr});\r\n        };\r\n    }\r\n\r\n    chooseColor(pos) {\r\n        let curr = this.state.curr;\r\n\r\n        if (pairEquals(\r\n                curr.select,\r\n                pos))\r\n            return 'grey';\r\n        else if (pairEquals(\r\n                curr.pointer,\r\n                pos))\r\n            return 'red';\r\n\r\n        return 'white';\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\r\n            'keydown',\r\n            this.changeText,\r\n            false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\r\n            'keydown',\r\n            this.changeText,\r\n            false);\r\n    }\r\n\r\n    tile(val, row, col) {\r\n        let pos = [row, col];\r\n\r\n        return <td\r\n                onClick={this.changeColor(pos).bind(this)}\r\n                bgcolor={this.chooseColor(pos)}>\r\n            <div>&nbsp;{val}&nbsp;</div>\r\n        </td>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className='App-header'>\r\n                <div className='split left'>\r\n                    <div className='centered'>\r\n                        <table>\r\n                            <tbody>\r\n                                {this.state.grid.map((arr, row) =>\r\n                                    (<tr>{\r\n                                        arr.map((val, col) =>\r\n                                        this.tile(val, row, col))\r\n                                    }</tr>)\r\n                                )}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <div className='split right'>\r\n                    <div className='centered'>\r\n                        <code>Instructions:</code>\r\n                        <ul style={{fontSize: '75%', textAlign: 'left'}}>\r\n                            <li>Click to select/unselect</li>\r\n                            <li>Type to change selected cell</li>\r\n                            <li>\r\n                                Commands located&nbsp;\r\n                                <a href='https://esolangs.org/wiki/Back'>here</a>\r\n                            </li>\r\n                        </ul>\r\n                        <Buttons\r\n                            run={(m) => this.runCode(m)}\r\n                            set={(s) => this.setState(s)}\r\n                            arr={this.state.grid}\r\n                        />\r\n                        <br />\r\n                        <code>Output:</code>\r\n                        <br />\r\n                        <div className='output'>\r\n                            <code>&nbsp;</code>\r\n                            {this.state.output.tape.map((val, ind) => {\r\n                                let color = this.state.output.cell === ind\r\n                                    ? 'red' : 'white';\r\n                                return <code style={{color: color}}>\r\n                                    {val}&nbsp;\r\n                                </code>;})}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}","export default function run(code) {\r\n    let row = code.length;\r\n    let col = code[0].length;\r\n    let arr = [{\r\n        end: false,\r\n        pos: [0, 0],\r\n        vel: [0, 1],\r\n        tape: [0],\r\n        cell: 0\r\n    }];\r\n    let ind = 0;\r\n\r\n    return function(back = false) {\r\n        let state = arr[arr.length - 1];\r\n\r\n        if (back && ind)\r\n            ind -= 1;\r\n        else if (!back && !state.end)\r\n            ind += 1;\r\n\r\n        if (ind < arr.length)\r\n            return arr[ind];\r\n\r\n        let {tape, cell, end} = state;\r\n        let [x, y] = state.pos;\r\n        let [a, b] = state.vel;\r\n        let c = code[x][y];\r\n        tape = [...tape];\r\n\r\n        if (c === '\\\\') {\r\n            [a, b] = [b, a];\r\n        } else if (c === '/') {\r\n            [a, b] = [-b, -a];\r\n        } else if (c === '<' && cell) {\r\n            cell -= 1;\r\n        } else if (c === '>') {\r\n            cell += 1;\r\n            if (cell === tape.length)\r\n                tape.push(0);\r\n        } else if (c === '-') {\r\n            tape[cell] ^= 1;\r\n        } else if (c === '+' && !tape[cell]) {\r\n            [x, y] = [x + a, y + b];\r\n        } else if (c === '*') {\r\n            end = true;\r\n        }\r\n\r\n        x = (x + a) % row;\r\n        y = (y + b) % col;\r\n        state = {\r\n            pos: [x, y],\r\n            vel: [a, b],\r\n            tape: tape,\r\n            cell: cell,\r\n            end: end\r\n        };\r\n        arr.push(state);\r\n\r\n        return state;\r\n    };\r\n}","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n    return (\r\n        <header className='App-header'>\r\n            <h1>Bangyen</h1>\r\n            <div>\r\n                <Link to='/back'>\r\n                    <button className='custom'\r\n                            type='button'>\r\n                        Interpreter\r\n                    </button>\r\n                </Link>\r\n                <form action='https://github.com/bangyen'\r\n                        style={{display: 'inline-block'}}>\r\n                    <input type='submit'\r\n                        value='GitHub'\r\n                        className='custom' />\r\n                </form>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport Grid from './Grid';\nimport Home from './Home';\nimport './index.css';\nimport './Grid.css';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router basename='/'>\n            <div>\n                <Switch>\n                    <Route path=\"/back\">\n                        <Grid />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}